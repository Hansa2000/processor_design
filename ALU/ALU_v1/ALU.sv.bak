module ALU (
    input logic [31:0] operandA,
    input logic [31:0] operandB,
    input logic [2:0] ALUOp,
    input logic [5:0] funct3,
    output logic zero,
    output logic [31:0] result
);
    // ALU operations
    logic [31:0] addition;
    logic [31:0] subtraction;
    logic [31:0] bitwise_and;
    logic [31:0] bitwise_or;
    logic [31:0] bitwise_xor;
    logic [31:0] shift_left;
    logic [31:0] shift_right;
    logic [31:0] shift_right_arithmetic;
    logic [31:0] slt; // Set if Less Than
    logic [31:0] sltu; // Set if Less Than Unsigned

    // Perform the ALU operations based on ALUOp and funct3
    always_comb begin
        case (ALUOp)
            3'b000: // ALUOp = 000, ADD
                addition = operandA + operandB;
            3'b001: // ALUOp = 001, SUB
                subtraction = operandA - operandB;
            3'b010: // ALUOp = 010, AND
                bitwise_and = operandA & operandB;
            3'b011: // ALUOp = 011, OR
                bitwise_or = operandA | operandB;
            3'b100: // ALUOp = 100, XOR
                bitwise_xor = operandA ^ operandB;
            3'b101: // ALUOp = 101, SLL
                shift_left = operandA << operandB[4:0];
            3'b110: // ALUOp = 110, SRL
                shift_right = operandA >> operandB[4:0];
            3'b111: // ALUOp = 111, SRA
                shift_right_arithmetic = $signed(operandA) >>> operandB[4:0];
            default:
                // Handle the default case if needed.
        endcase

        // Assign result based on the selected operation
        if (ALUOp == 3'b000) // ALUOp = 000, ADD
            result = addition;
        else if (ALUOp == 3'b001) // ALUOp = 001, SUB
            result = subtraction;
        else if (ALUOp == 3'b010) // ALUOp = 010, AND
            result = bitwise_and;
        else if (ALUOp == 3'b011) // ALUOp = 011, OR
            result = bitwise_or;
        else if (ALUOp == 3'b100) // ALUOp = 100, XOR
            result = bitwise_xor;
        else if (ALUOp == 3'b101) // ALUOp = 101, SLL
            result = shift_left;
        else if (ALUOp == 3'b110) // ALUOp = 110, SRL
            result = shift_right;
        else if (ALUOp == 3'b111) // ALUOp = 111, SRA
            result = shift_right_arithmetic;
        else
            result = 32'b0; // Default case
    end

    // Set the zero flag if the result is zero
    assign zero = (result == 32'b0);

endmodule
